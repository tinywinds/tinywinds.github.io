<!DOCTYPE html>
<html lang="en">

<!-- Head tag -->
<head><meta name="generator" content="Hexo 3.9.0">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="google-site-verification" content="xBT4GhYoi5qRD5tr338pgPM5OWHHIDR6mNg1a3euekI">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content>
    <meta name="keyword" content>
    <link rel="shortcut icon" href="/img/ironman-draw.png">
    <!-- Place this tag in your head or just before your close body tag. -->
    <script async defer src="https://buttons.github.io/buttons.js"></script>
    <title>
        
          jQuery Ajax 实例 全解析 - Tinywind | 佚名程序员
        
    </title>

    <link rel="canonical" href="http://tinywind.cn/ajax_example">

    <!-- Bootstrap Core CSS -->
    <link rel="stylesheet" href="/css/bootstrap.min.css">

    <!-- Custom CSS --> 
    <link rel="stylesheet" href="/css/beantech.min.css">
    
    <!-- Pygments Highlight CSS -->
    <link rel="stylesheet" href="/css/highlight.css">

    <link rel="stylesheet" href="/css/widget.css">

    <link rel="stylesheet" href="/css/rocket.css">

    <link rel="stylesheet" href="/css/signature.css">

    <link rel="stylesheet" href="/css/toc.css">

    <!-- Custom Fonts -->
    <!-- <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet" type="text/css"> -->
    <!-- Hux change font-awesome CDN to qiniu -->
    <link href="https://cdn.staticfile.org/font-awesome/4.5.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">


    <!-- Hux Delete, sad but pending in China
    <link href='http://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800' rel='stylesheet' type='text/
    css'>
    -->


    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
        <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->

    <!-- ga & ba script hoook -->
    <script></script>
</head>


<!-- hack iOS CSS :active style -->
<body ontouchstart="">
	<!-- Modified by Yu-Hsuan Yen -->
<!-- Post Header -->
<style type="text/css">
    header.intro-header{
        
            background-image: url('')
            /*post*/
        
    }
    
</style>

<header class="intro-header" >
    <!-- Signature -->
    <div id="signature">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                
                    <div class="post-heading">
                        <div class="tags">
                            
                              <a class="tag" href="/tags/#javascript" title="javascript">javascript</a>
                            
                        </div>
                        <h1>jQuery Ajax 实例 全解析</h1>
                        <h2 class="subheading"></h2>
                        <span class="meta">
                            Posted by Nathan on
                            2015-01-13
                        </span>
                    </div>
                


                </div>
            </div>
        </div>
    </div>
</header>

	
    <!-- Navigation -->
<nav class="navbar navbar-default navbar-custom navbar-fixed-top">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header page-scroll">
            <button type="button" class="navbar-toggle">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="/">佚名程序员</a>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <!-- Known Issue, found by Hux:
            <nav>'s height woule be hold on by its content.
            so, when navbar scale out, the <nav> will cover tags.
            also mask any touch event of tags, unfortunately.
        -->
        <div id="huxblog_navbar">
            <div class="navbar-collapse">
                <ul class="nav navbar-nav navbar-right">
                    <li>
                        <a href="/">主页</a>
                    </li>

                    

                        
                        <li>
                            <a href="/about/">关于</a>
                        </li>
                        
                    

                        
                        <li>
                            <a href="/archive/">内容归档</a>
                        </li>
                        
                    

                        
                        <li>
                            <a href="/tags/">标签列表</a>
                        </li>
                        
                    
                    
                </ul>
            </div>
        </div>
        <!-- /.navbar-collapse -->
    </div>
    <!-- /.container -->
</nav>
<script>
    // Drop Bootstarp low-performance Navbar
    // Use customize navbar with high-quality material design animation
    // in high-perf jank-free CSS3 implementation
    var $body   = document.body;
    var $toggle = document.querySelector('.navbar-toggle');
    var $navbar = document.querySelector('#huxblog_navbar');
    var $collapse = document.querySelector('.navbar-collapse');

    $toggle.addEventListener('click', handleMagic)
    function handleMagic(e){
        if ($navbar.className.indexOf('in') > 0) {
        // CLOSE
            $navbar.className = " ";
            // wait until animation end.
            setTimeout(function(){
                // prevent frequently toggle
                if($navbar.className.indexOf('in') < 0) {
                    $collapse.style.height = "0px"
                }
            },400)
        }else{
        // OPEN
            $collapse.style.height = "auto"
            $navbar.className += " in";
        }
    }
</script>


    <!-- Main Content -->
    <!-- Modify by Yu-Hsuan Yen -->

<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">

            <!-- Post Container -->
            <div class="
                col-lg-8 col-lg-offset-2
                col-md-10 col-md-offset-1
                post-container">

                <p><strong>1. load</strong>( url, [data], [callback] ) ：载入远程 HTML 文件代码并插入至 DOM 中。 <strong>url </strong>(String) : 请求的HTML页的URL地址。 <strong>data </strong>(Map) : (可选参数) 发送至服务器的 key/value 数据。 <strong>callback </strong>(Callback) : (可选参数) 请求完成时(不需要是success的)的回调函数。 这个方法默认使用 GET 方式来传递的，如果[data]参数有传递数据进去，就会自动转换为POST方式的。jQuery 1.2 中，可以指定选择符，来筛选载入的 HTML 文档，DOM 中将仅插入筛选出的 HTML 代码。语法形如 “url #some &gt; selector”。 这个方法可以很方便的动态加载一些HTML文件，例如表单。 示例代码：</p>
<p>$(“.ajax.load”).load(“<a href="http://www.cnblogs.com/yeer/archive/2009/06/10/1500682.html" target="_blank" rel="noopener">http://www.cnblogs.com/yeer/archive/2009/06/10/1500682.html</a> .post”,<br>function (responseText, textStatus, XMLHttpRequest){<br>this;//在这里this指向的是当前的DOM对象，即$(“.ajax.load”)[0]<br>//alert(responseText);//请求返回的内容//alert(textStatus);//请求状态：success，error//alert(XMLHttpRequest);//XMLHttpRequest对象<br>});</p>
<p>这里将显示结果。</p>
<p>  <strong>注：</strong>不知道为什么URL写绝对路径在FF下会出错，知道的麻烦告诉下。下面的get()和post()示例使用的是绝对路径，所以在FF下你将会出错并不会看到返回结果。还有get()和post()示例都是跨域调用的，发现传上来后没办法获取结果，所以把运行按钮去掉了。   <strong>2. jQuery.get</strong>( url, [data], [callback] )：使用GET方式来进行异步请求</p>
<blockquote>
<p>参数： <strong>url </strong>(String) :  发送请求的URL地址. <strong>data </strong>(Map) : (可选) 要发送给服务器的数据，以 Key/value 的键值对形式表示，会做为QueryString附加到请求URL中。 <strong>callback </strong>(Function) : (可选) 载入成功时回调函数(只有当Response的返回状态是success才是调用该方法)。</p>
</blockquote>
<p>这是一个简单的 GET 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax。示例代码：</p>
<p> $.get(“./Ajax.aspx”, {Action:”get”,Name:”lulu”}, function (data, textStatus){<br>//返回的 data 可以是 xmlDoc, jsonObj, html, text, 等等.this; // 在这里this指向的是Ajax请求的选项配置信息，请参考下图alert(data);<br>//alert(textStatus);//请求状态：success，error等等。<br>当然这里捕捉不到error，因为error的时候根本不会运行该回调函数//alert(this);<br>});</p>
<p>点击发送请求： jQuery.get()回调函数里面的 this ，指向的是Ajax请求的选项配置信息： <a href="http://images.cnblogs.com/cnblogs_com/QLeelulu/WindowsLiveWriter/jQueryAjax_B934/image_4.png" target="_blank" rel="noopener"><img src="file:///C:/Users/CUIXU_~1/AppData/Local/Temp/enhtmlclip/image_thumb_1.png" alt="image"></a>   <strong>3. jQuery.post</strong>( url, [data], [callback], [type] ) ：使用POST方式来进行异步请求  </p>
<blockquote>
<p>参数： <strong>url </strong>(String) : 发送请求的URL地址. <strong>data </strong>(Map) : (可选) 要发送给服务器的数据，以 Key/value 的键值对形式表示。 <strong>callback </strong>(Function) : (可选) 载入成功时回调函数(只有当Response的返回状态是success才是调用该方法)。 <strong>type</strong> (String) : (可选)官方的说明是：Type of data to be sent。其实应该为客户端请求的类型(JSON,XML,等等)</p>
</blockquote>
<p>这是一个简单的 POST 请求功能以取代复杂 $.ajax 。请求成功时可调用回调函数。如果需要在出错时执行函数，请使用 $.ajax。示例代码： Ajax.aspx：</p>
<p>Response.ContentType = “application/json”;<br>Response.Write(“{result: ‘“ + Request[“Name”] + “,你好！(这消息来自服务器)’}”);</p>
<p>jQuery 代码：</p>
<p>$.post(“Ajax.aspx”, { Action: “post”, Name: “lulu” },<br>function (data, textStatus){<br>// data 可以是 xmlDoc, jsonObj, html, text, 等等.//this; // 这个Ajax请求的选项配置信息，请参考jQuery.get()说到的thisalert(data.result);<br>}, “json”);</p>
<p>点击提交： 这里设置了请求的格式为”json”： <a href="http://images.cnblogs.com/cnblogs_com/QLeelulu/WindowsLiveWriter/jQueryAjax_B934/image_6.png" target="_blank" rel="noopener"><img src="file:///C:/Users/CUIXU_~1/AppData/Local/Temp/enhtmlclip/image_thumb_2.png" alt="image"></a> 如果你设置了请求的格式为”json”，此时你没有设置Response回来的ContentType 为：Response.ContentType = “application/json”; 那么你将无法捕捉到返回的数据。 注意一下，alert(data.result); 由于设置了Accept报头为“json”，这里返回的data就是一个对象，并不需要用eval()来转换为对象。   <strong>4. jQuery.getScript</strong>( url, [callback] ) : 通过 GET 方式请求载入并执行一个 JavaScript 文件。</p>
<blockquote>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p><strong>url </strong>(String) : 待载入 JS 文件地址。 <strong>callback </strong>(Function) : (可选) 成功载入后回调函数。</p>
</blockquote>
<p>jQuery 1.2 版本之前，getScript 只能调用同域 JS 文件。 1.2中，您可以跨域调用 JavaScript 文件。注意：Safari 2 或更早的版本不能在全局作用域中同步执行脚本。如果通过 getScript 加入脚本，请加入延时函数。 这个方法可以用在例如当只有编辑器focus()的时候才去加载编辑器需要的JS文件.下面看一些示例代码： 加载并执行 test.js。<strong>jQuery 代码:</strong> $.getScript(“test.js”);</p>
<hr>
<p>加载并执行 AjaxEvent.js ，成功后显示信息。 <strong>jQuery 代码:</strong></p>
<p>$.getScript(“AjaxEvent.js”, function(){<br>alert(“AjaxEvent.js 加载完成并执行完成.你再点击上面的Get或Post按钮看看有什么不同？”);<br>});</p>
<p>加载完后请重新点击一下上面的 Load 请求看看有什么不同。 <strong>jQuery Ajax 事件</strong> Ajax请求会产生若干不同的事件，我们可以订阅这些事件并在其中处理我们的逻辑。在jQuery这里有两种Ajax事件：局部事件 和 全局事件。 <strong>局部事件</strong>就是在每次的Ajax请求时在方法内定义的，例如：</p>
<p> $.ajax({<br>beforeSend: function(){<br>// Handle the beforeSend event<br>},<br>complete: function(){<br>// Handle the complete event<br>}<br>// …<br>});</p>
<p><strong>全局事件</strong>是每次的Ajax请求都会触发的，它会向DOM中的所有元素广播，在上面 getScript() 示例中加载的脚本就是全局Ajax事件。全局事件可以如下定义：</p>
<p> $(“#loading”).bind(“ajaxSend”, function(){<br>$(this).show();<br>}).bind(“ajaxComplete”, function(){<br>$(this).hide();<br>});</p>
<p>或者：</p>
<p> $(“#loading”).ajaxStart(function(){<br>$(this).show();<br>}); </p>
<p>我们可以在特定的请求将全局事件禁用，只要设置下 global 选项就可以了：</p>
<p> $.ajax({<br>url: “test.html”,<br>global: false,// 禁用全局Ajax事件.// …<br>});</p>
<p>下面是jQuery官方给出的完整的Ajax事件列表：</p>
<ul>
<li><strong>ajaxStart</strong> (Global Event) This event is broadcast if an Ajax request is started and no other Ajax requests are currently running.<ul>
<li><strong>beforeSend</strong> (Local Event) This event, which is triggered before an Ajax request is started, allows you to modify the XMLHttpRequest object (setting additional headers, if need be.)</li>
<li><strong>ajaxSend</strong> (Global Event) This global event is also triggered before the request is run.</li>
<li><strong>success</strong> (Local Event) This event is only called if the request was successful (no errors from the server, no errors with the data).</li>
<li><strong>ajaxSuccess</strong> (Global Event) This event is also only called if the request was successful.</li>
<li><strong>error</strong> (Local Event) This event is only called if an error occurred with the request (you can never have both an error and a success callback with a request).</li>
<li><strong>ajaxError</strong> (Global Event) This global event behaves the same as the local error event.</li>
<li><strong>complete</strong> (Local Event) This event is called regardless of if the request was successful, or not. You will always receive a complete callback, even for synchronous requests.</li>
<li><strong>ajaxComplete</strong> (Global Event) This event behaves the same as the complete event and will be triggered every time an Ajax request finishes.</li>
</ul>
</li>
<li><p><strong>ajaxStop</strong> (Global Event) This global event is triggered if there are no more Ajax requests being processed.具体的全局事件请参考API文档。 好了，下面开始说jQuery里面功能最强的Ajax请求方法 $.ajax();   <strong>jQuery.ajax</strong>( options ) : 通过 HTTP 请求加载远程数据 这个是jQuery 的底层 AJAX 实现。简单易用的高层实现见 $.get, $.post 等。 $.ajax() 返回其创建的 XMLHttpRequest 对象。大多数情况下你无需直接操作该对象，但特殊情况下可用于手动终止请求。 <strong>注意：</strong> 如果你指定了 dataType 选项，请确保服务器返回正确的 MIME 信息，(如 xml 返回 “text/xml”)。错误的 MIME 类型可能导致不可预知的错误。见 <a href="http://docs.jquery.com/Specifying_the_Data_Type_for_AJAX_Requests" target="_blank" rel="noopener">Specifying the Data Type for AJAX Requests</a> 。 当设置 datatype 类型为 ‘script’ 的时候，所有的远程(不在同一个域中)POST请求都回转换为GET方式。 $.ajax() 只有一个参数：参数 key/value 对象，包含各配置及回调函数信息。详细参数选项见下。 jQuery 1.2 中，您可以跨域加载 JSON 数据，使用时需将数据类型设置为 <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" target="_blank" rel="noopener">JSONP</a>。使用 <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" target="_blank" rel="noopener">JSONP</a> 形式调用函数时，如 “myurl?callback=?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。数据类型设置为 “jsonp” 时，jQuery 将自动调用回调函数。(这个我不是很懂) 参数列表：</p>
<p>参数名</p>
<p>类型</p>
<p>描述</p>
<p><strong>url</strong></p>
<p>String</p>
<p>(默认: 当前页地址) 发送请求的地址。</p>
<p><strong>type</strong></p>
<p>String</p>
<p>(默认: “GET”) 请求方式 (“POST” 或 “GET”)， 默认为 “GET”。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。</p>
<p><strong>timeout</strong></p>
<p>Number</p>
<p>设置请求超时时间（毫秒）。此设置将覆盖全局设置。</p>
<p><strong>async</strong></p>
<p>Boolean</p>
<p>(默认: true) 默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。</p>
<p><strong>beforeSend</strong></p>
<p>Function</p>
<p>发送请求前可修改 XMLHttpRequest 对象的函数，如添加自定义 HTTP 头。XMLHttpRequest 对象是唯一的参数。</p>
<p>function (XMLHttpRequest) {<br>​         this; // the options for this ajax request<br>​         }</p>
<p><strong>cache</strong></p>
<p>Boolean</p>
<p>(默认: true) jQuery 1.2 新功能，设置为 false 将不会从浏览器缓存中加载请求信息。</p>
<p><strong>complete</strong></p>
<p>Function</p>
<p>请求完成后回调函数 (请求成功或失败时均调用)。参数： XMLHttpRequest 对象，成功信息字符串。</p>
<p>function (XMLHttpRequest, textStatus) {<br>​         this; // the options for this ajax request<br>​         }</p>
<p><strong>contentType</strong></p>
<p>String</p>
<p>(默认: “application/x-www-form-urlencoded”) 发送信息至服务器时内容编码类型。默认值适合大多数应用场合。</p>
<p><strong>data</strong></p>
<p>Object, String</p>
<p>发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:[“bar1”, “bar2”]} 转换为 ‘&amp;foo=bar1&amp;foo=bar2’。</p>
<p><strong>dataType</strong></p>
<p>String</p>
<p>预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息返回 responseXML 或 responseText，并作为回调函数参数传递，可用值: “xml”: 返回 XML 文档，可用 jQuery 处理。 “html”: 返回纯文本 HTML 信息；包含 script 元素。 “script”: 返回纯文本 JavaScript 代码。不会自动缓存结果。 “json”: 返回 JSON 数据 。 “jsonp”: <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" target="_blank" rel="noopener">JSONP</a> 格式。使用 <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/" target="_blank" rel="noopener">JSONP</a> 形式调用函数时，如 “myurl?callback=?” jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。</p>
<p><strong>error</strong></p>
<p>Function</p>
<p>(默认: 自动判断 (xml 或 html)) 请求失败时将调用此方法。这个方法有三个参数：XMLHttpRequest 对象，错误信息，（可能）捕获的错误对象。</p>
<p>function (XMLHttpRequest, textStatus, errorThrown) {<br>​         // 通常情况下textStatus和errorThown只有其中一个有值<br>​         this; // the options for this ajax request<br>​         }</p>
<p><strong>global</strong></p>
<p>Boolean</p>
<p>(默认: true) 是否触发全局 AJAX 事件。设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或 ajaxStop 。可用于控制不同的Ajax事件</p>
<p><strong>ifModified</strong></p>
<p>Boolean</p>
<p>(默认: false) 仅在服务器数据改变时获取新数据。使用 HTTP 包 Last-Modified 头信息判断。</p>
<p><strong>processData</strong></p>
<p>Boolean</p>
<p>(默认: true) 默认情况下，发送的数据将被转换为对象(技术上讲并非字符串) 以配合默认内容类型 “application/x-www-form-urlencoded”。如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。</p>
<p><strong>success</strong></p>
<p>Function</p>
<p>请求成功后回调函数。这个方法有两个参数：服务器返回数据，返回状态</p>
<p>function (data, textStatus) {<br>​         // data could be xmlDoc, jsonObj, html, text, etc…<br>​         this; // the options for this ajax request<br>​         }</p>
<p>这里有几个Ajax事件参数：<strong>beforeSend </strong>，<strong>success </strong>，<strong>complete ，error 。</strong>我们可以定义这些事件来很好的处理我们的每一次的Ajax请求。注意一下，这些Ajax事件里面的 this 都是指向Ajax请求的选项信息的(请参考说 get() 方法时的this的图片)。 请认真阅读上面的参数列表，如果你要用jQuery来进行Ajax开发，那么这些参数你都必需熟知的。</p>
<h4 id="示例代码，获取博客园首页的文章题目："><a href="#示例代码，获取博客园首页的文章题目：" class="headerlink" title="示例代码，获取博客园首页的文章题目："></a>示例代码，获取博客园首页的文章题目：</h4><p>$.ajax({<br>type: “get”,<br>url: “<a href="http://www.cnblogs.com/rss&quot;" target="_blank" rel="noopener">http://www.cnblogs.com/rss&quot;</a>,<br>beforeSend: function(XMLHttpRequest){<br>//ShowLoading();<br>},<br>success: function(data, textStatus){<br>$(“.ajax.ajaxResult”).html(“”);<br>$(“item”,data).each(function(i, domEle){<br>$(“.ajax.ajaxResult”).append(“<li>“+$(domEle).children(“title”).text()+”</li>“);<br>});<br>},<br>complete: function(XMLHttpRequest, textStatus){<br>//HideLoading();<br>},<br>error: function(){<br>//请求出错处理<br>}<br>});</p>
<p>这里将显示首页文章列表。     <strong>其他</strong> <strong>jQuery.ajaxSetup</strong>( options ) : 设置全局 AJAX 默认选项。 设置 AJAX 请求默认地址为 “/xmlhttp/“，禁止触发全局 AJAX 事件，用 POST 代替默认 GET 方法。其后的 AJAX 请求不再设置任何选项参数。 <strong>jQuery 代码:</strong></p>
<p>$.ajaxSetup({<br>url: “/xmlhttp/“,<br>global: false,<br>type: “POST”<br>});<br>$.ajax({ data: myData });</p>
<p>  <strong>serialize() 与 serializeArray()</strong> serialize() : 序列表表格内容为字符串。 serializeArray() : 序列化表格元素 (类似 ‘.serialize()’ 方法) 返回 JSON 数据结构数据。 示例： HTML代码：</p>
<p></p><p id="results"><b>Results: </b> </p><form><select name="single"><option>Single</option><option>Single2</option></select><select name="multiple" multiple="multiple"><option selected="selected">Multiple</option><option>Multiple2</option><option selected="selected">Multiple3</option></select><br><input type="checkbox" name="check" value="check1"> check1<br>&lt;input type=”checkbox” name=”check” value=”check2” <p></p>
<p>checked=”checked”/&gt; check2<br>&lt;input type=”radio” name=”radio” value=”radio1” </p>
<p>checked=”checked”/&gt; radio1<br><input type="radio" name="radio" value="radio2"> radio2</p>
<p></p></form><p></p>
</li>
<li><p><a href="http://images.cnblogs.com/cnblogs_com/yeer/image_thumb_3.png" target="_blank" rel="noopener"><img src="file:///C:/Users/CUIXU_~1/AppData/Local/Temp/enhtmlclip/image_thumb_3.png" alt></a> <strong>serializeArray() 结果为：</strong> <a href="http://images.cnblogs.com/cnblogs_com/yeer/image_thumb_4.png" target="_blank" rel="noopener"><img src="file:///C:/Users/CUIXU_~1/AppData/Local/Temp/enhtmlclip/image_thumb_4.png" alt="image"></a></p>
</li>
<li>以上转自：<a href="http://www.cnblogs.com/yeer/archive/2009/07/23/1529460.html" target="_blank" rel="noopener">http://www.cnblogs.com/yeer/archive/2009/07/23/1529460.html</a></li>
</ul>
<p>博客园大道至简 <a href="http://www.cnblogs.com/jams742003/" target="_blank" rel="noopener">http://www.cnblogs.com/jams742003/</a> 转载请注明：博客园</p>
<p>分类: <a href="http://www.cnblogs.com/jams742003/category/142842.html" target="_blank" rel="noopener">Ajax</a></p>
<p>绿色通道： 好文要顶 关注我 收藏该文<a href="http://space.cnblogs.com/msg/send/%e6%a2%85%e6%a1%a6" target="_blank" rel="noopener">与我联系</a> <img src="file:///C:/Users/CUIXU_~1/AppData/Local/Temp/enhtmlclip/icon_weibo_24.png" alt></p>
<p><a href="http://home.cnblogs.com/u/jams742003/" target="_blank" rel="noopener"><img src="file:///C:/Users/CUIXU_~1/AppData/Local/Temp/enhtmlclip/u33655.jpg" alt></a></p>
<p><a href="http://home.cnblogs.com/u/jams742003/" target="_blank" rel="noopener">梅桦</a> <a href="http://home.cnblogs.com/u/jams742003/followees" target="_blank" rel="noopener">关注 - 13</a> <a href="http://home.cnblogs.com/u/jams742003/followers" target="_blank" rel="noopener">粉丝 - 248</a></p>
<p>+加关注</p>
<p>2</p>
<p>0</p>
<p>(请您对文章做出评价)</p>
<p><a href="http://www.cnblogs.com/jams742003/archive/2009/09/16/1567771.html" target="_blank" rel="noopener">« </a>上一篇：<a href="http://www.cnblogs.com/jams742003/archive/2009/09/16/1567771.html" title="发布于2009-09-16 14:56" target="_blank" rel="noopener">Jquery ajax参数设置</a> <a href="http://www.cnblogs.com/jams742003/archive/2009/09/16/1567885.html" target="_blank" rel="noopener">» </a>下一篇：<a href="http://www.cnblogs.com/jams742003/archive/2009/09/16/1567885.html" title="发布于2009-09-16 16:15" target="_blank" rel="noopener">jquery Ajax示例</a></p>
<p>posted @ 2009-09-16 15:23 <a href="http://www.cnblogs.com/jams742003/" target="_blank" rel="noopener">梅桦</a> 阅读(3318) 评论(0) <a href="http://i.cnblogs.com/EditPosts.aspx?postid=1567800" target="_blank" rel="noopener">编辑</a> <a href="http://www.cnblogs.com/jams742003/archive/2009/09/16/1567800.html#" target="_blank" rel="noopener">收藏</a></p>

                

                <hr>
                <!-- Pager -->
                <ul class="pager">
                    
                        <li class="previous">
                            <a href="/php_core_lifetime" data-toggle="tooltip" data-placement="top" title="PHP内核探索：一次请求生命周期">&larr; 上一篇</a>
                        </li>
                    
                    
                        <li class="next">
                            <a href="/redirect-and-dispatch-in-phalcon" data-toggle="tooltip" data-placement="top" title="redirect and dispatch in phalcon?">下一篇 &rarr;</a>
                        </li>
                    
                </ul>

                <!-- duoshuo Share start -->
                
                <!-- 多说 Share end-->

                <!-- 多说评论框 start -->
                
                <!-- 多说评论框 end -->

                <!-- disqus comment start -->
                
                <!-- disqus comment end -->
            </div>
            
            <!-- Tabe of Content -->
            <!-- Table of Contents -->

                
            <!-- Sidebar Container -->
            <div class="
                col-lg-8 col-lg-offset-2
                col-md-10 col-md-offset-1
                sidebar-container">

                <!-- Featured Tags -->
                
                <section>
                    <!-- no hr -->
                    <h5><a href="/tags/">FEATURED TAGS</a></h5>
                    <div class="tags">
                       
                          <a class="tag" href="/tags/#javascript" title="javascript">javascript</a>
                        
                    </div>
                </section>
                

                <!-- Friends Blog -->
                
            </div>
        </div>
    </div>
</article>







<!-- async load function -->
<script>
    function async(u, c) {
      var d = document, t = 'script',
          o = d.createElement(t),
          s = d.getElementsByTagName(t)[0];
      o.src = u;
      if (c) { o.addEventListener('load', function (e) { c(null, e); }, false); }
      s.parentNode.insertBefore(o, s);
    }
</script>
<!-- anchor-js, Doc:http://bryanbraun.github.io/anchorjs/ -->
<script>
    async("https://cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js",function(){
        anchors.options = {
          visible: 'hover',
          placement: 'left',
          icon: 'ℬ'
        };
        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');
    })
</script>
<style>
    /* place left on bigger screen */
    @media all and (min-width: 800px) {
        .anchorjs-link{
            position: absolute;
            left: -0.75em;
            font-size: 1.1em;
            margin-top : -0.1em;
        }
    }
</style>



    <!-- Footer -->
    <!-- Footer -->
<footer>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <ul class="list-inline text-center">
                
                
                

                

                

                

                

                </ul>
                <p class="copyright text-muted">
                    Copyright &copy; Nathan 2019 
                    <br>
                </p>
            </div>
        </div>
    </div>
</footer>

<!-- jQuery -->
<script src="/js/jquery.min.js"></script>

<!-- Bootstrap Core JavaScript -->
<script src="/js/bootstrap.min.js"></script>

<!-- Custom Theme JavaScript -->
<script src="/js/hux-blog.min.js"></script>


<!-- async load function -->
<script>
    function async(u, c) {
      var d = document, t = 'script',
          o = d.createElement(t),
          s = d.getElementsByTagName(t)[0];
      o.src = u;
      if (c) { o.addEventListener('load', function (e) { c(null, e); }, false); }
      s.parentNode.insertBefore(o, s);
    }
</script>

<!-- 
     Because of the native support for backtick-style fenced code blocks 
     right within the Markdown is landed in Github Pages, 
     From V1.6, There is no need for Highlight.js, 
     so Huxblog drops it officially.

     - https://github.com/blog/2100-github-pages-now-faster-and-simpler-with-jekyll-3-0  
     - https://help.github.com/articles/creating-and-highlighting-code-blocks/    
-->
<!--
    <script>
        async("http://cdn.bootcss.com/highlight.js/8.6/highlight.min.js", function(){
            hljs.initHighlightingOnLoad();
        })
    </script>
    <link href="http://cdn.bootcss.com/highlight.js/8.6/styles/github.min.css" rel="stylesheet">
-->


<!-- jquery.tagcloud.js -->
<script>
    // only load tagcloud.js in tag.html
    if($('#tag_cloud').length !== 0){
        async("http://tinywind.cn/js/jquery.tagcloud.js",function(){
            $.fn.tagcloud.defaults = {
                //size: {start: 1, end: 1, unit: 'em'},
                color: {start: '#bbbbee', end: '#0085a1'},
            };
            $('#tag_cloud a').tagcloud();
        })
    }
</script>

<!--fastClick.js -->
<script>
    async("https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js", function(){
        var $nav = document.querySelector("nav");
        if($nav) FastClick.attach($nav);
    })
</script>


<!-- Google Analytics -->




<!-- Baidu Tongji -->






	<a id="rocket" href="#top" class=""></a>
	<script type="text/javascript" src="/js/totop.js?v=1.0.0" async=""></script>
    <script type="text/javascript" src="/js/toc.js?v=1.0.0" async=""></script>
<!-- Image to hack wechat -->
<img src="http://tinywind.cn/img/icon_wechat.png" width="0" height="0" />
<!-- Migrate from head to bottom, no longer block render and still work -->

</body>

</html>
